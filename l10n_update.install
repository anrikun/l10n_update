<?php

/**
 * @file
 * Install file for l10n remote updates.
 */

/**
 * Implements hook_schema().
 */
function l10n_update_schema() {
  $schema['l10n_update_project'] = array(
    'description' => 'Update information for project translations.',
    'fields' => array(
      'name' => array(
        'description' => 'A unique short name to identify the project.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'project_type' => array(
        'description' => 'Project type, may be core, module, theme',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'core' => array(
        'description' => 'Core compatibility string for this project.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'version' => array(
        'description' => 'Human readable name for project used on the interface.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'l10n_path' => array(
        'description' => 'Server path this project updates.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Status flag. If TRUE, translations of this module will be updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['l10n_update_file'] = array(
    'description' => 'File and download information for project translations.',
    'fields' => array(
      'project' => array(
        'description' => 'A unique short name to identify the project.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => 'Reference to the {languages}.language for this translation.',
        'type' => 'varchar',
        'length' => '12',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'File origin: download or localfile',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
        'default' => '',
      ),
      'filename' => array(
        'description' => 'Link to translation file for download.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'fileurl' => array(
        'description' => 'Link to translation file for download.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uri' => array(
        'description' => 'File system path for importing the file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp of the time the file was downloaded or saved to disk. Zero if not yet downloaded',
        'type' => 'int',
        'not null' => FALSE,
        'disp-width' => '11',
        'default' => 0,
      ),
      'version' => array(
        'description' => 'Version tag of the downloaded file.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Status flag. TBD',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'last_checked' => array(
        'description' => 'Unix timestamp of the last time this translation was downloaded from or checked at remote server and confirmed to be the most recent release available.',
        'type' => 'int',
        'not null' => FALSE,
        'disp-width' => '11',
        'default' => 0,
      ),
    ),
    'primary key' => array('project', 'language'),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function l10n_update_schema_alter(&$schema) {
  $schema['locales_target']['fields']['l10n_status'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Boolean indicating whether the translation is custom to this site.',
  );
}

/**
 * Implements hook_install().
 */
function l10n_update_install() {
  $config = config('l10n_update.settings');
  db_add_field('locales_target', 'l10n_status', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  $config->set('l10n_update_rebuild_projects', 1);

  // Create the translation directory. We try different alternative paths as the
  // default may not always be writable.
  $directories = array(
    $config->get('l10n_update_download_store'),
    config_get('system.core', 'file_public_path') . '/translations',
    'files/translations',
  );
  foreach ($directories as $directory) {
    if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $config->set('l10n_update_download_store', $directory);
      l10n_update_ensure_htaccess($directory);
      return;
    }
  }
  $config->save();

  watchdog('l10n_update', 'The directory %directory does not exist or is not writable.', array('%directory' => $directories[0]), WATCHDOG_ERROR);
  backdrop_set_message(t('The directory %directory does not exist or is not writable.', array('%directory' => $directories[0])), 'error');
}

/**
 * Implements hook_uninstall().
 */
function l10n_update_uninstall() {
  db_drop_field('locales_target', 'l10n_status');
}

/**
 * Implements hook_requirements().
 */
function l10n_update_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $available_updates = array();
    $untranslated = array();
    $languages = l10n_update_translatable_language_list();

    if ($languages) {
      // Determine the status of the translation updates per language.
      $status = l10n_update_get_status();
      if ($status) {
        foreach ($status as $project) {
          foreach ($project as $langcode => $project_info) {
            if (empty($project_info->type)) {
              $untranslated[$langcode] = $languages[$langcode];
            }
            elseif ($project_info->type == L10N_UPDATE_LOCAL || $project_info->type == L10N_UPDATE_REMOTE) {
              $available_updates[$langcode] = $languages[$langcode];
            }
          }
        }

        if ($available_updates || $untranslated) {
          if ($available_updates) {
            $requirements['l10n_update'] = array(
              'title' => 'Translation update status',
              'value' => l(t('Updates available'), 'admin/config/regional/translate/update'),
              'severity' => REQUIREMENT_WARNING,
              'description' => t('Updates available for: @languages. See the <a href="!updates">Translate interface update</a> page for more information.', array(
                '@languages' => implode(', ', $available_updates),
                '!updates' => url('admin/config/regional/translate/update'),
              )),
            );
          }
          else {
            $requirements['l10n_update'] = array(
              'title' => 'Translation update status',
              'value' => t('Missing translations'),
              'severity' => REQUIREMENT_INFO,
              'description' => t('Missing translations for: @languages. See the <a href="!updates">Translate interface update</a> page for more information.', array(
                '@languages' => implode(', ', $untranslated),
                '!updates' => url('admin/config/regional/translate/update'),
              )),
            );
          }
        }
        else {
          $requirements['l10n_update'] = array(
            'title' => 'Translation update status',
            'value' => t('Up to date'),
            'severity' => REQUIREMENT_OK,
          );
        }
      }
      else {
        $requirements['locale_translation'] = array(
          'title' => 'Translation update status',
          'value' => l(t('Can not determine status'), 'admin/config/regional/translate/update'),
          'severity' => REQUIREMENT_WARNING,
          'description' => t('No translation status is available. See the <a href="!updates">Translate interface update</a> page for more information.', array('!updates' => url('admin/config/regional/translate/update'))),
        );
      }
    }

    // Test the contents of the .htaccess file in the translations directory.
    l10n_update_ensure_htaccess();
    $htaccess_file = 'translations://.htaccess';
    $directory = config_get('l10n_update.settings', 'l10n_update_download_store');
    // Check for the string which was added to the recommended .htaccess file
    // in the latest security update.
    if (!file_exists($htaccess_file) || !($contents = @file_get_contents($htaccess_file)) || strpos($contents, 'Drupal_Security_Do_Not_Remove_See_SA_2013_003') === FALSE) {
      $requirements['l10n_update_htaccess'] = array(
        'title' => t('Translations directory'),
        'value' => t('Not fully protected'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('See <a href="@url">@url</a> for information about the recommended .htaccess file which should be added to the %directory directory to help protect against arbitrary code execution.', array('@url' => 'http://drupal.org/SA-CORE-2013-003', '%directory' => $directory)),
      );
    }
  }

  return $requirements;
}

/**
 * Set the minimum upgrade version.
 *
 * Ensure you've upgraded to the latest version in Drupal 7 before
 * attempting to upgrade to Backdrop.
 */
function l10n_update_update_last_removed() {
  return 7210;
}

/**
 * Update l10n_update from Drupal to Backdrop.
 */
function l10n_update_update_1000() {
  $config = config('l10n_update.settings');

  // migrate variables
  $config->set('l10n_update_check_disabled', update_variable_get('l10n_update_check_disabled', FALSE));
  $config->set('l10n_update_check_frequency', update_variable_get('l10n_update_check_frequency', 0));
  $config->set('l10n_update_check_mode', update_variable_get('l10n_update_check_mode', L10N_UPDATE_USE_SOURCE_REMOTE_AND_LOCAL));
  $config->set('l10n_update_default_filename', update_variable_get('l10n_update_default_filename', L10N_UPDATE_DEFAULT_FILE_NAME));
  $config->set('l10n_update_default_update_url', update_variable_get('l10n_update_default_update_url', L10N_UPDATE_DEFAULT_SERVER_PATTERN));
  $config->set('l10n_update_disabled_languages', update_variable_get('l10n_update_disabled_languages', array()));
  $config->set('l10n_update_disabled_projects', update_variable_get('l10n_update_disabled_projects', array()));
  $config->set('l10n_update_download_store', update_variable_get('l10n_update_download_store', L10N_UPDATE_DEFAULT_TRANSLATION_PATH));
  $config->set('l10n_update_import_enabled', update_variable_get('l10n_update_import_enabled', TRUE));
  $config->set('l10n_update_import_mode', update_variable_get('l10n_update_import_mode', LOCALE_IMPORT_KEEP));
  $config->save();

  // Delete variables.
  update_variable_del('l10n_update_check_disabled');
  update_variable_del('l10n_update_check_frequency');
  update_variable_del('l10n_update_check_mode');
  update_variable_del('l10n_update_default_filename');
  update_variable_del('l10n_update_default_update_url');
  update_variable_del('l10n_update_disabled_languages');
  update_variable_del('l10n_update_disabled_projects');
  update_variable_del('l10n_update_download_store');
  update_variable_del('l10n_update_import_enabled');
  update_variable_del('l10n_update_import_mode');
}
